# Ingress controller service.
# From https://github.com/kubernetes/ingress/blob/e8b61b40d9d00e33ef7fdd0671b822f33f373da6/examples/static-ip/nginx/static-ip-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-lb
  annotations:
    # This line does something something source IPs that I'm going to just
    # ignore.
    # service.beta.kubernetes.io/external-traffic: OnlyLocal
  labels:
    app: nginx-ingress-lb
spec:
  type: LoadBalancer
  # Static IP in my project. Must be regional IP, not global.
  loadBalancerIP: 173.255.114.90
  ports:
  - port: 80
    name: http
    targetPort: 80
  - port: 443
    name: https
    targetPort: 443
  selector:
    # Selects nginx-ingress-controller pods
    k8s-app: nginx-ingress-controller
---
# Ingress controller deployment.
# From https://github.com/kubernetes/ingress/blob/e8b61b40d9d00e33ef7fdd0671b822f33f373da6/examples/static-ip/nginx/nginx-ingress-controller.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  labels:
    k8s-app: nginx-ingress-controller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: nginx-ingress-controller
    spec:
      # hostNetwork makes it possible to use ipv6 and to preserve the source IP correctly regardless of docker configuration
      # however, it is not a hard dependency of the nginx-ingress-controller itself and it may cause issues if port 10254 already is taken on the host
      # that said, since hostPort is broken on CNI (https://github.com/kubernetes/kubernetes/issues/31307) we have to use hostNetwork where CNI is used
      # like with kubeadm
      # hostNetwork: true
      terminationGracePeriodSeconds: 60
      containers:
      - image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.3
        name: nginx-ingress-controller
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
        ports:
        - containerPort: 80
          hostPort: 80
        - containerPort: 443
          hostPort: 443
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        args:
        - /nginx-ingress-controller
        - --default-backend-service=kube-system/default-http-backend
        - --publish-service=$(POD_NAMESPACE)/nginx-ingress-lb
